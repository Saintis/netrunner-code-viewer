id,name,code
10097,Aghora,"(deva ""Aghora"")"
04087,Alpha,"(auto-icebreaker [""All""]
                 {:abilities [{:cost [:credit 1]
                               :req (req (= (:position run) (count run-ices)))
                               :msg ""break 1 subroutine on the outermost ICE protecting this server""}
                              (strength-pump 1 1)]})"
05041,Alias,"(auto-icebreaker [""Sentry""]
                 {:abilities [{:cost [:credit 1]
                               :req (req (#{:hq :rd :archives} (first (:server run))))
                               :msg ""break 1 sentry subroutine""}
                              (strength-pump 2 3)]})"
10101,Ankusa,"(auto-icebreaker [""Barrier""]
                 {:abilities [(break-sub 2 1 ""barrier"")
                              (strength-pump 1 1)
                              {:label ""Add barrier to HQ""
                               :req (req (and (has-subtype? current-ice ""Barrier"")
                                              (rezzed? current-ice)))
                               :msg (msg ""add "" (:title current-ice) "" to HQ after breaking all its subroutines"")
                               :effect (req (let [c current-ice]
                                              (move state :corp c :hand nil)
                                              (continue state side nil)))}]})"
03040,Atman,"{:prompt ""How many power counters?""
 :choices :credit
 :msg (msg ""add "" target "" power counters"")
 :effect (effect (add-counter card :power target))
 :abilities [(break-sub 1 1)]
 :strength-bonus (req (get-in card [:counter :power] 0))
 :events {:counter-added {:req (req (= :cid target) (:cid card))
                          :effect (effect (update-breaker-strength card))}}}"
01025,Aurora,"(auto-icebreaker [""Barrier""]
                 {:abilities [(break-sub 2 1 ""barrier"")
                              (strength-pump 2 3)]})"
01042,Battering Ram,"(auto-icebreaker [""Barrier""]
                 {:abilities [(break-sub 2 2 ""barrier"")
                              (strength-pump 1 1 :all-run)]})"
06053,BlacKat,"{:abilities [(break-sub 1 1 ""barrier"")
             {:cost [:credit 1]
              :msg ""break up to 3 barrier subroutines (using a stealth [Credits])""}
             (strength-pump 2 1)
             {:cost [:credit 2]
              :msg ""add 2 strength (using at least 1 stealth [Credits])""
              :effect (effect (pump card 2)) :pump 2}]}"
11042,Black Orchestra,"(let [install {:req (req (and (= (:zone card) [:discard])
                              (rezzed? current-ice)
                              (has-subtype? current-ice ""Code Gate"")))
               :optional {:player :runner
                          :prompt ""Install Black Orchestra?""
                          :yes-ability {:effect (effect (unregister-events card)
                                                        (runner-install :runner card))}}}
      heap-event (req (when (= (:zone card) [:discard])
                        (unregister-events state side card)
                        (register-events state side
                                         (:events (card-def card))
                                         (assoc card :zone [:discard]))))]
{:move-zone heap-event
 :abilities [{:cost [:credit 3]
              :effect (effect (pump card 2)) :pump 2
              :msg ""add 2 strength and break up to 2 subroutines""}]
 :events {:rez install
          :approach-ice install
          :run install}})"
11068,Blackstone,"{:abilities [(break-sub 1 1 ""barrier"")
             {:cost [:credit 3]
              :msg ""add 4 strength (using at least 1 stealth [Credits])""
              :effect (effect (pump card 4 :all-run)) :pump 4}]}"
10062,Brahman,"(auto-icebreaker [""All""]
                 {:abilities [(break-sub 1 2 ""ICE"")
                              (strength-pump 2 1)]})"
05042,Breach,"(auto-icebreaker [""Barrier""]
                 {:abilities [{:cost [:credit 2]
                               :req (req (#{:hq :rd :archives} (first (:server run))))
                               :msg ""break 3 barrier subroutines""}
                              (strength-pump 2 4)]})"
06094,"Cerberus ""Cuj.0"" H3","(cerberus ""Sentry"")"
06096,"Cerberus ""Rex"" H2","(cerberus ""Code Gate"")"
06099,"Cerberus ""Lady"" H1","(cerberus ""Barrier"")"
08069,Chameleon,"{:prompt ""Choose one subtype""
 :choices [""Barrier"" ""Code Gate"" ""Sentry""]
 :msg (msg ""choose "" target)
 :effect (effect (update! (assoc card :subtype-target target)))
 :events {:runner-turn-ends {:msg ""add itself to Grip"" :effect (effect (move card :hand))}}
 :abilities [{:cost [:credit 1] :msg (msg ""break 1 "" (:subtype-target card) "" subroutine"")}]}"
01007,Corroder,"(auto-icebreaker [""Barrier""]
                 {:abilities [(break-sub 1 1 ""barrier"")
                              (strength-pump 1 1)]})"
02089,Creeper,"(cloud-icebreaker
  (auto-icebreaker [""Sentry""]
                   {:abilities [(break-sub 2 1 ""sentry"")
                                (strength-pump 1 1)]}))"
08046,Crowbar,"(break-and-enter ""Code Gate"")"
01051,Crypsis,"(auto-icebreaker [""All""]
                 {:abilities [(break-sub 1 1 ""ICE"" (effect (update! (assoc card :crypsis-broke true))))
                              (strength-pump 1 1)
                              {:cost [:click 1]
                               :msg ""place 1 virus counter""
                               :effect (effect (add-counter card :virus 1))}]
                  :events (let [encounter-ends-effect {:req (req (:crypsis-broke card))
                                                       :effect (req ((:effect breaker-auto-pump) state side eid card targets)
                                                                    (if (pos? (get-in card [:counter :virus]))
                                                                      (add-counter state side card :virus -1)
                                                                      (trash state side card {:cause :self-trash}))
                                                                    (update! state side (dissoc (get-card state card) :crypsis-broke)))}]
                            {:pass-ice encounter-ends-effect
                             :run-ends encounter-ends-effect})})"
03044,Cyber-Cypher,"(auto-icebreaker [""Code Gate""]
                 {:prompt ""Choose a server where this copy of Cyber-Cypher can be used:""
                  :msg (msg ""target "" target)
                  :choices (req servers)
                  :effect (effect (update! (assoc card :server-target target)))
                  :leave-play (effect (update! (dissoc card :server-target)))
                  :abilities [(break-sub 1 1 ""code gate"")
                              (strength-pump 1 1)]})"
03042,Dagger,"(auto-icebreaker [""Sentry""]
                 {:abilities [(break-sub 1 1 ""sentry"")
                              (strength-pump 1 5)]})"
11006,Dai V,"(auto-icebreaker [""All""]
                 {:abilities [{:cost [:credit 2]
                               :msg ""break all ICE subroutines (using stealth [Credits])""}
                              (strength-pump 1 1)]})"
02102,Darwin,"{:flags {:runner-phase-12 (req true)}
 :events {:purge {:effect (effect (update-breaker-strength card))}}
 :abilities [(break-sub 2 1 ""ICE"")
             {:label ""Place 1 virus counter (start of turn)""
              :cost [:credit 1]
              :msg ""place 1 virus counter""
              :req (req (:runner-phase-12 @state))
              :effect (effect (add-counter card :virus 1)
                              (update-breaker-strength card))}]
 :strength-bonus (req (or (get-virus-counters state side card) 0))}"
02066,Deus X,"{:prevent {:damage [:net]}
 :abilities [{:msg ""break any number of AP subroutines""
              :effect (effect (trash card {:cause :ability-cost}))}
             {:msg ""prevent any amount of net damage""
              :effect (effect (trash card {:cause :ability-cost})
                              (damage-prevent :net Integer/MAX_VALUE))}]}"
07040,Eater,"(auto-icebreaker [""All""]
                 {:abilities [{:cost [:credit 1]
                               :msg ""break ICE subroutine and access 0 cards this run""
                               :effect (effect (max-access 0))}
                              (strength-pump 1 1)]})"
09033,Endless Hunger,"{:abilities [{:label ""Trash 1 installed card to break 1 \""End the run.\"" subroutine""
              :prompt ""Choose a card to trash for Endless Hunger""
              :choices {:req #(and (= (:side %) ""Runner"") (:installed %))}
              :msg (msg ""trash "" (:title target)
                        "" and break 1 \""[Subroutine] End the run.\"" subroutine"")
              :effect (effect (trash target {:unpreventable true}))}]}"
02104,Faerie,"(auto-icebreaker [""Sentry""]
                 {:abilities [{:msg ""break a sentry subroutine""
                               :effect (effect (trash card))}
                              (strength-pump 1 1)]})"
08061,Faust,"{:abilities [{:label ""Trash 1 card from Grip to break 1 subroutine""
              :prompt ""Choose a card from your grip to trash for Faust""
              :choices {:req in-hand?}
              :msg (msg ""trash "" (:title target) "" and break 1 subroutine"")
              :effect (effect (trash target {:unpreventable true}))}
             {:label ""Trash 1 card from Grip to add 2 strength""
              :prompt ""Choose a card from your grip to trash for Faust""
              :choices {:req in-hand?}
              :msg (msg ""trash "" (:title target) "" and add 2 strength"")
              :effect (effect (trash target {:unpreventable true}) (pump card 2))}]}"
01026,Femme Fatale,"(auto-icebreaker [""Sentry""]
                 {:prompt ""Choose a piece of ICE to target for bypassing""
                  :choices {:req ice?}
                  :leave-play (req (remove-icon state side card))
                  :effect (req (let [ice target
                                     serv (zone->name (second (:zone ice)))]
                                 (add-icon state side card ice ""F"" ""blue"")
                                 (system-msg state side
                                             (str ""chooses "" (card-str state ice)
                                                  "" for Femme Fatale's bypass ability""))))
                  :abilities [(break-sub 1 1 ""sentry"")
                              (strength-pump 2 1)]})"
02062,Force of Nature,"(auto-icebreaker [""Code Gate""]
                 {:abilities [(break-sub 2 2 ""code gate"")
                              (strength-pump 1 1)]})"
04065,Garrote,"(auto-icebreaker [""Sentry""]
                 {:abilities [(break-sub 1 1 ""sentry"")
                              (strength-pump 1 1)]})"
11025,Golden,"(auto-icebreaker [""Sentry""]
                 {:abilities [(break-sub 2 2 ""sentry"")
                              (strength-pump 2 4)
                              {:label ""Derez a sentry and return Golden to your Grip""
                               :cost [:credit 2]
                               :req (req (and (rezzed? current-ice) (has-subtype? current-ice ""Sentry"")))
                               :msg (msg ""derez "" (:title current-ice) "" and return Golden to their Grip"")
                               :effect (effect (derez current-ice)
                                               (move card :hand))}]})"
01043,Gordian Blade,"(auto-icebreaker [""Code Gate""]
                 {:abilities [(break-sub 1 1 ""code gate"")
                              (strength-pump 1 1 :all-run)]})"
05044,Gingerbread,"(auto-icebreaker [""Tracer""]
                 {:abilities [(break-sub 1 1 ""tracer"")
                              (strength-pump 2 3)]})"
09050,GS Sherman M3,"(global-sec-breaker ""Barrier"")"
09049,GS Shrike M2,"(global-sec-breaker ""Sentry"")"
09048,GS Striker M1,"(global-sec-breaker ""Code Gate"")"
11045,Houdini,"{:abilities [(break-sub 1 1 ""code gate"")
             {:cost [:credit 2]
              :msg ""add 4 strength (using at least 1 stealth [Credits])""
              :effect (effect (pump card 4 :all-run)) :pump 4}]}"
03048,Inti,"(auto-icebreaker [""Barrier""]
                 {:abilities [(break-sub 1 1 ""barrier"")
                              (strength-pump 2 1 :all-run)]})"
04043,Knight,"{:abilities [{:cost [:click 1] :label ""Host Knight on a piece of ICE""
              :effect (req (let [k (get-card state card)
                                 hosted? (ice? (:host k))
                                 icepos (ice-index state (get-card state (:host k)))]
                             (resolve-ability state side
                              {:prompt (msg ""Host Knight on a piece of ICE"" (when hosted? "" not before or after the current host ICE""))
                               :choices {:req #(if hosted?
                                                 (and (or (when (= (:zone %) (:zone (:host k)))
                                                            (not= 1 (abs (- (ice-index state %) icepos))))
                                                          (not= (:zone %) (:zone (:host k))))
                                                      (ice? %)
                                                      (installed? %)
                                                      (not (some (fn [c] (has? c :subtype ""Caïssa"")) (:hosted %))))
                                                 (and (ice? %)
                                                      (installed? %)
                                                      (not (some (fn [c] (has? c :subtype ""Caïssa"")) (:hosted %)))))}
                               :msg (msg ""host it on "" (card-str state target))
                               :effect (effect (host target card))} card nil)))}
             {:cost [:credit 2] :msg ""break 1 subroutine on the host ICE""}]}"
04026,Leviathan,"(auto-icebreaker [""Code Gate""]
                 {:abilities [(break-sub 3 3 ""code gate"")
                              (strength-pump 3 5)]})"
02004,Morning Star,"{:abilities [(break-sub 1 0 ""barrier"")]}"
01011,Mimic,"{:abilities [(break-sub 1 1 ""sentry"")]}"
10005,Mongoose,"(auto-icebreaker [""Sentry""]
                 {:abilities [(break-sub 1 2 ""sentry"")
                              (strength-pump 2 2)]})"
11023,Nfr,"{:abilities [{:label ""Place 1 power counter on Nfr""
              :msg ""place 1 power counter on it""
              :effect (effect (add-counter card :power 1)
                              (update-breaker-strength card))}
             (break-sub 1 1 ""barrier"")]
 :strength-bonus (req (get-in card [:counter :power] 0))}"
01027,Ninja,"(auto-icebreaker [""Sentry""]
                 {:abilities [(break-sub 1 1 ""sentry"")
                              (strength-pump 3 5)]})"
11024,Paperclip,"(let [install {:req (req (and (= (:zone card) [:discard])
                              (rezzed? current-ice)
                              (has-subtype? current-ice ""Barrier"")))
               :optional {:player :runner
                          :prompt ""Install Paperclip?""
                          :yes-ability {:effect (effect (unregister-events card)
                                                        (runner-install :runner card))}}}
      heap-event (req (when (= (:zone card) [:discard])
                        (unregister-events state side card)
                        (register-events state side
                                         (:events (card-def card))
                                         (assoc card :zone [:discard]))))]
{:move-zone heap-event
 :abilities [{:label (str ""X [Credits]: +X strength, break X subroutines"")
              :choices :credit
              :prompt ""How many credits?""
              :effect (effect (pump card target))
              :msg (msg ""increase strength by "" target "" and break "" target "" barrier subroutine""
                        (when (not= target 1) ""s""))}]
 :events {:rez install
          :approach-ice install
          :run install}})"
05046,Passport,"(auto-icebreaker [""Code Gate""]
                 {:abilities [{:cost [:credit 1]
                               :req (req (#{:hq :rd :archives} (first (:server run))))
                               :msg ""break 1 code gate subroutine""}
                              (strength-pump 2 2)]})"
04088,Omega,"(auto-icebreaker [""All""]
                 {:abilities [{:cost [:credit 1] :req (req (= 1 (:position run)))
                               :msg ""break 1 subroutine on the innermost ICE protecting this server""}
                              (strength-pump 1 1)]})"
05053,Overmind,"(auto-icebreaker [""All""]
                 {:effect (effect (add-counter card :power (:memory runner)))
                  :abilities [{:counter-cost [:power 1]
                               :msg ""break 1 subroutine""}
                              (strength-pump 1 1)]})"
02006,Peacock,"(auto-icebreaker [""Code Gate""]
                 {:abilities [(break-sub 2 1 ""code gate"")
                              (strength-pump 2 3)]})"
11044,Peregrine,"(auto-icebreaker [""Code Gate""]
                 {:abilities [(break-sub 1 1 ""code gate"")
                              (strength-pump 3 3)
                              {:label ""Derez a code gate and return Peregrine to your Grip""
                               :cost [:credit 2]
                               :req (req (and (rezzed? current-ice) (has-subtype? current-ice ""Code Gate"")))
                               :msg (msg ""derez "" (:title current-ice) "" and return Peregrine to their Grip"")
                               :effect (effect (derez current-ice)
                                               (move card :hand))}]})"
01046,Pipeline,"(auto-icebreaker [""Sentry""]
                 {:abilities [(break-sub 1 1 ""sentry"")
                              (strength-pump 2 1 :all-run)]})"
06057,Refractor,"(auto-icebreaker [""Code Gate""]
                 {:abilities [(break-sub 1 1 ""code gate"")
                              (strength-pump 1 3)]})"
10044,Sadyojata,"(deva ""Sadyojata"")"
06117,Sage,"{:abilities [{:cost [:credit 2] :req (req (or (has-subtype? current-ice ""Barrier"")
                                              (has-subtype? current-ice ""Code Gate"")))
              :msg ""break 1 code gate or barrier subroutine""}]
 :effect (req (add-watch state (keyword (str ""sage"" (:cid card)))
                         (fn [k ref old new]
                           (when (not= (get-in old [:runner :memory]) (get-in new [:runner :memory]))
                             (update-breaker-strength ref side card))))
              (update-breaker-strength state side card))
 :leave-play (req (remove-watch state (keyword (str ""sage"" (:cid card)))))
 :strength-bonus (req (:memory runner))}"
02027,Snowball,"(auto-icebreaker [""Barrier""]
                 {:abilities [{:cost [:credit 1] :msg ""break 1 barrier subroutine""
                               :effect (effect (pump card 1 :all-run))}
                              (strength-pump 1 1)]})"
04067,Sharpshooter,"(auto-icebreaker [""Destroyer""]
                 {:abilities [{:msg ""break any number of destroyer subroutines"" :effect (effect (trash card {:cause :ability-cost}))}
                              (strength-pump 1 2)]})"
08066,Shiv,"(break-and-enter ""Sentry"")"
08004,Spike,"(break-and-enter ""Barrier"")"
08028,Study Guide,"{:abilities [(break-sub 1 1 ""code gate"")
             {:cost [:credit 2] :msg ""place 1 power counter""
              :effect (effect (add-counter card :power 1)
                              (update-breaker-strength card))}]
 :strength-bonus (req (get-in card [:counter :power] 0))}"
06077,Switchblade,"(auto-icebreaker [""Sentry""]
                 {:abilities [(break-sub 1 0 ""sentry"")
                              (strength-pump 1 7)]})"
04047,Torch,"(auto-icebreaker [""Code Gate""]
                 {:abilities [(break-sub 1 1 ""code gate"")
                              (strength-pump 1 1)]})"
10061,Vamadeva,"(deva ""Vamadeva"")"
01013,Wyrm,"(auto-icebreaker [""All""]
                 {:abilities [{:cost [:credit 3]
                               :msg ""break 1 subroutine on ICE with 0 or less strength""}
                              {:cost [:credit 1]
                               :label ""Give -1 strength to current ice""
                               :req (req current-ice)
                               :msg (msg ""give -1 strength to "" (:title current-ice))
                               :effect (effect (update! (update-in card [:wyrm-count] (fnil inc 0)))
                                               (update-ice-strength current-ice))}
                              (strength-pump 1 1)]
                  :events (let [auto-pump (fn [state side eid card targets]
                                            ((:effect breaker-auto-pump) state side eid card targets))
                                wy {:effect (effect (update! (dissoc card :wyrm-count))
                                                    (auto-pump eid card targets))}]
                            {:pre-ice-strength {:req (req (and (= (:cid target) (:cid current-ice))
                                                               (:wyrm-count card)))
                                                :effect (effect (ice-strength-bonus (- (:wyrm-count (get-card state card))) target)
                                                                (auto-pump eid card targets))}
                             :pass-ice wy
                             :run-ends wy})})"
01014,Yog.0,"{:abilities [(break-sub 0 1 ""code gate"")]}"
02007,ZU.13 Key Master,"(cloud-icebreaker
  (auto-icebreaker [""Code Gate""]
                   {:abilities [(break-sub 1 1 ""code gate"")
                                (strength-pump 1 1)]}))"
